from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import h5py as h5
import numpy as np
import os
import sys

import tensorflow as tf

from tqdm import tqdm

FLAGS = None


BOARD_TRANSFORMATIONS = [
    lambda feature: np.rot90(feature, 1),
    lambda feature: np.rot90(feature, 2),
    lambda feature: np.rot90(feature, 3),
    lambda feature: np.fliplr(feature),
    lambda feature: np.flipud(feature),
    lambda feature: np.transpose(feature),
    lambda feature: np.fliplr(np.rot90(feature, 1))
]


def convert_to(data_set, output_dir, name):
    """Converts a dataset to tfrecords."""
    states = data_set['states']
    actions = data_set['actions']
    bsize = states.shape[2]
    num_examples = states.shape[0]

    if num_examples != actions.shape[0]:
        raise ValueError('States size {:d} does not match actions size {:s}.'
                         .format(num_examples, actions.shape[0]))

    filename = os.path.join(output_dir, name + '.tfrecords')
    print('Writing', filename)
    opt = tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.GZIP)
    with tf.python_io.TFRecordWriter(filename, options=opt) as writer:
        pbar = tqdm(total=num_examples)
        for index in xrange(num_examples):
            state = states[index]
            # transpose to TF input shape (samples, rows, cols, input_depth)
            state = state.transpose(1, 2, 0)
            state = state.astype(np.float32)

            action = np.zeros((bsize, bsize), dtype=np.float32)
            action_index = actions[index]
            action[action_index[0], action_index[1]] = 1

            d_feature = {}
            d_feature['state'] = tf.train.Feature(float_list=tf.train.FloatList(value=state.flatten()))
            d_feature['action'] = tf.train.Feature(float_list=tf.train.FloatList(value=action.flatten()))

            features = tf.train.Features(feature=d_feature)
            example = tf.train.Example(features=features)
            serialized = example.SerializeToString()
            writer.write(serialized)

            if FLAGS.symmetries: 
                for transform in BOARD_TRANSFORMATIONS:
                    state_transform = transform(state)
                    if np.all(state_transform == state):
                        continue
                    action_transform = transform(action)

                    d_feature = {}
                    d_feature['state'] = tf.train.Feature(float_list=tf.train.FloatList(value=state_transform.flatten()))
                    d_feature['action'] = tf.train.Feature(float_list=tf.train.FloatList(value=action_transform.flatten()))

                    features = tf.train.Features(feature=d_feature)
                    example = tf.train.Example(features=features)
                    serialized = example.SerializeToString()
                    writer.write(serialized)

            pbar.update(1)
    print("Writing {:s} done!".format(filename))


def read_test(file_path):
    opt = tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.GZIP)
    for serialized_example in tf.python_io.tf_record_iterator(file_path, options=opt):
        example = tf.train.Example()
        example.ParseFromString(serialized_example)
        print(np.array(example.features.feature['state'].float_list.value))
        print(np.array(example.features.feature['action'].float_list.value))
        break


def main(unused_argv):
    # Get the data.
    data_sets = h5.File(FLAGS.data)

    # Convert to Examples and write the result to TFRecords.
    output_dirname = os.path.dirname(FLAGS.data)
    output_name = os.path.basename(FLAGS.data)
    output_name = output_name[:output_name.find('.')]
    convert_to(data_sets, output_dirname, output_name)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--data',
        type=str,
        default=None,
        help='State action pair extracted from SGF (generated by sgf2hdf5).'
    )
    parser.add_argument(
        '--symmetries',
        default=False,
        action="store_true",
        help='Add symmetric board state or not.'
    )
    FLAGS, unparsed = parser.parse_known_args()
    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
