import os
import sys

from bamboo.board import set_check_superko, set_check_seki, set_japanese_rule, set_use_lgrf2
from bamboo.zobrist_hash import set_hash_size, initialize_hash
from bamboo.nakade import initialize_nakade_hash
from bamboo.local_pattern import read_rands, init_d12_rsp_hash, init_x33_hash, init_d12_hash
from bamboo.rollout_preprocess import initialize_rollout_const

from bamboo.gtp.gtp_connector import MCTSConnector, RemoteMCTSConnector
from bamboo.gtp.gtp_wrapper import ExtendedGtpEngine


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='Run GTP')
    parser.add_argument("--pn_path", "-pn", type=str, required=False,
                        help="Policy network weights (keras)")
    parser.add_argument("--vn_path", "-vn", type=str, required=False,
                        help="Value Network model (tensorflow)")
    parser.add_argument("--rollout_path", "-ro", type=str, required=False,
                        help="Rollout policy network weights (hdf5)")
    parser.add_argument("--tree_path", "-tr", type=str, required=False,
                        help="Tree policy network weights (hdf5)")
    parser.add_argument("--mt_rands_file", "-mt", type=str, required=False,
                        help="Mersenne twister random number file")
    parser.add_argument("--x33_csv", "-x33", type=str, required=False,
                        help="Non-response 3x3 pattern file")
    parser.add_argument("--d12_rsp_csv", "-rd12", type=str, required=False,
                        help="Response 12 point diamond(MD2) pattern file")
    parser.add_argument("--d12_csv", "-d12", type=str, required=False,
                        help="Non-response 12 point diamond(MD2) pattern file")
    parser.add_argument("--policy_temperature", type=float, default=0.67,
                        help="Distribution temperature of players using policies (Default: 0.67)")
    parser.add_argument("--threads", "-t", type=int, default=1,
                        help="Number of search threads (Default: 1)")
    parser.add_argument("--node_hash_size", "-n", type=int, default=1048576,
                        help="MCT node hash size (Default: 2**20)")
    parser.add_argument("--time_settings", type=str, default="900 0 0",
                        help="Time settings in GTP context. (Default: '900 0 0')")
    parser.add_argument("--const_time", type=float, default=0.0,
                        help="Constant time of simulation for each move. Enable if non-zero value set regardless of time_settings. (Default: 0.0)")
    parser.add_argument("--const_playout", type=int, default=0,
                        help="Constant number of simulations for each move. Enable if no time_settings set. (Default: 0)")
    parser.add_argument("--size", "-s", type=int, default=19,
                        help="Size of the game board. SGFs not matching this are discarded with a warning")
    parser.add_argument("--superko", "-superko", default=True, action="store_true",
                        help="Use positional superko. (Default: True)")
    parser.add_argument("--japanese_rule", "-jp", default=False, action="store_true",
                        help="Use japanese rule. (Default: False)")
    parser.add_argument("--seki", "-seki", default=False, action="store_true",
                        help="Check seki at tree expansion. (Default: False)")
    parser.add_argument("--lgrf2", "-lgrf2", default=False, action="store_true",
                        help="Use LGRF2. (Default: False)")
    parser.add_argument("--intuition", default=False, action="store_true",
                        help="Play using policy network only. (Default: False)")
    parser.add_argument("--nogpu", default=False, action="store_true",
                        help="Play using CPU only. (Default: False)")
    parser.add_argument("--server", default=False, action="store_true",
                        help="Run as server mode")
    parser.add_argument("--port", "-p", type=int, default=5000,
                        help="GTP rest server port")

    parser.add_argument("--rpc_client_mode", default=False, action="store_true",
                        help="Connect to MCTS RPC server (support pondering)")
    parser.add_argument("--rpc_host", type=str, default='localhost',
                        help="MCTS RPC server host")
    parser.add_argument("--rpc_port", type=int, default=6000,
                        help="MCTS RPC server port")
    parser.add_argument("--verbose", "-v", default=False, action="store_true",
                        help="Turn on verbose mode")

    args = parser.parse_args()

    if not args.rpc_client_mode:
        set_check_superko(args.superko)
        set_japanese_rule(args.japanese_rule)
        set_check_seki(args.seki)
        set_use_lgrf2(args.lgrf2)

        # init tree hash
        set_hash_size(args.node_hash_size)
        initialize_hash()

        # init local patterns 
        read_rands(args.mt_rands_file)
        nakade_size = initialize_nakade_hash()
        x33_size = init_x33_hash(args.x33_csv)
        d12_rsp_size = init_d12_rsp_hash(args.d12_rsp_csv)
        d12_size = init_d12_hash(args.d12_csv)

        # init rollout const
        initialize_rollout_const(nakade_size,
            x33_size,
            d12_rsp_size,
            d12_size,
            pos_aware_d12=False)

        gtp_game = MCTSConnector(args.pn_path,
                                 args.vn_path,
                                 args.rollout_path,
                                 args.tree_path,
                                 args.policy_temperature,
                                 args.const_time,
                                 args.const_playout,
                                 args.threads,
                                 args.intuition,
                                 args.nogpu)

        if args.time_settings:
            try:
                main_time, byoyomi_time, byoyomi_stones = [int(t) for t in args.time_settings.split()]
            except ValueError:
                raise ValueError('Invalid time_settings input: {}'.format(arguments))
            gtp_game.set_time_settings(main_time, byoyomi_time, byoyomi_stones)
    else:
        gtp_game = RemoteMCTSConnector(args.rpc_host, args.rpc_port)

    gtp_engine = ExtendedGtpEngine(gtp_game, name='bamboo', version='0.0')

    if args.server:
        from flask import Flask
        from flask import request

        app = Flask(__name__)

        @app.route('/gtp')
        def gtp():
            cmd = request.args.get('cmd')
            print(cmd)
            engine_reply = gtp_engine.send(cmd)
            print(engine_reply)
            return engine_reply

        app.run(host="0.0.0.0", port=args.port, debug=False, threaded=True)
    else:
        from bamboo.gtp.gtp_wrapper import run_gtp
        run_gtp(gtp_game)
